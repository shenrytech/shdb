// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.2
// source: pb/shdb/v1/shdb.proto

package shdb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BinaryObjectServiceClient is the client API for BinaryObjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BinaryObjectServiceClient interface {
	List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListRsp, error)
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*BinaryObject, error)
	Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*BinaryObject, error)
	Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*BinaryObject, error)
	Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*BinaryObject, error)
	StreamRefs(ctx context.Context, in *StreamRefReq, opts ...grpc.CallOption) (BinaryObjectService_StreamRefsClient, error)
	GetSchema(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*descriptorpb.FileDescriptorSet, error)
	GetTypeNames(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTypeNamesRsp, error)
}

type binaryObjectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBinaryObjectServiceClient(cc grpc.ClientConnInterface) BinaryObjectServiceClient {
	return &binaryObjectServiceClient{cc}
}

func (c *binaryObjectServiceClient) List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListRsp, error) {
	out := new(ListRsp)
	err := c.cc.Invoke(ctx, "/shdb.v1.BinaryObjectService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binaryObjectServiceClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*BinaryObject, error) {
	out := new(BinaryObject)
	err := c.cc.Invoke(ctx, "/shdb.v1.BinaryObjectService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binaryObjectServiceClient) Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*BinaryObject, error) {
	out := new(BinaryObject)
	err := c.cc.Invoke(ctx, "/shdb.v1.BinaryObjectService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binaryObjectServiceClient) Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*BinaryObject, error) {
	out := new(BinaryObject)
	err := c.cc.Invoke(ctx, "/shdb.v1.BinaryObjectService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binaryObjectServiceClient) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*BinaryObject, error) {
	out := new(BinaryObject)
	err := c.cc.Invoke(ctx, "/shdb.v1.BinaryObjectService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binaryObjectServiceClient) StreamRefs(ctx context.Context, in *StreamRefReq, opts ...grpc.CallOption) (BinaryObjectService_StreamRefsClient, error) {
	stream, err := c.cc.NewStream(ctx, &BinaryObjectService_ServiceDesc.Streams[0], "/shdb.v1.BinaryObjectService/StreamRefs", opts...)
	if err != nil {
		return nil, err
	}
	x := &binaryObjectServiceStreamRefsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BinaryObjectService_StreamRefsClient interface {
	Recv() (*ObjRef, error)
	grpc.ClientStream
}

type binaryObjectServiceStreamRefsClient struct {
	grpc.ClientStream
}

func (x *binaryObjectServiceStreamRefsClient) Recv() (*ObjRef, error) {
	m := new(ObjRef)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *binaryObjectServiceClient) GetSchema(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*descriptorpb.FileDescriptorSet, error) {
	out := new(descriptorpb.FileDescriptorSet)
	err := c.cc.Invoke(ctx, "/shdb.v1.BinaryObjectService/GetSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binaryObjectServiceClient) GetTypeNames(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTypeNamesRsp, error) {
	out := new(GetTypeNamesRsp)
	err := c.cc.Invoke(ctx, "/shdb.v1.BinaryObjectService/GetTypeNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BinaryObjectServiceServer is the server API for BinaryObjectService service.
// All implementations must embed UnimplementedBinaryObjectServiceServer
// for forward compatibility
type BinaryObjectServiceServer interface {
	List(context.Context, *ListReq) (*ListRsp, error)
	Get(context.Context, *GetReq) (*BinaryObject, error)
	Create(context.Context, *CreateReq) (*BinaryObject, error)
	Update(context.Context, *UpdateReq) (*BinaryObject, error)
	Delete(context.Context, *DeleteReq) (*BinaryObject, error)
	StreamRefs(*StreamRefReq, BinaryObjectService_StreamRefsServer) error
	GetSchema(context.Context, *emptypb.Empty) (*descriptorpb.FileDescriptorSet, error)
	GetTypeNames(context.Context, *emptypb.Empty) (*GetTypeNamesRsp, error)
	mustEmbedUnimplementedBinaryObjectServiceServer()
}

// UnimplementedBinaryObjectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBinaryObjectServiceServer struct {
}

func (UnimplementedBinaryObjectServiceServer) List(context.Context, *ListReq) (*ListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedBinaryObjectServiceServer) Get(context.Context, *GetReq) (*BinaryObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBinaryObjectServiceServer) Create(context.Context, *CreateReq) (*BinaryObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBinaryObjectServiceServer) Update(context.Context, *UpdateReq) (*BinaryObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedBinaryObjectServiceServer) Delete(context.Context, *DeleteReq) (*BinaryObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBinaryObjectServiceServer) StreamRefs(*StreamRefReq, BinaryObjectService_StreamRefsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamRefs not implemented")
}
func (UnimplementedBinaryObjectServiceServer) GetSchema(context.Context, *emptypb.Empty) (*descriptorpb.FileDescriptorSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchema not implemented")
}
func (UnimplementedBinaryObjectServiceServer) GetTypeNames(context.Context, *emptypb.Empty) (*GetTypeNamesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTypeNames not implemented")
}
func (UnimplementedBinaryObjectServiceServer) mustEmbedUnimplementedBinaryObjectServiceServer() {}

// UnsafeBinaryObjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BinaryObjectServiceServer will
// result in compilation errors.
type UnsafeBinaryObjectServiceServer interface {
	mustEmbedUnimplementedBinaryObjectServiceServer()
}

func RegisterBinaryObjectServiceServer(s grpc.ServiceRegistrar, srv BinaryObjectServiceServer) {
	s.RegisterService(&BinaryObjectService_ServiceDesc, srv)
}

func _BinaryObjectService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinaryObjectServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shdb.v1.BinaryObjectService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinaryObjectServiceServer).List(ctx, req.(*ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinaryObjectService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinaryObjectServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shdb.v1.BinaryObjectService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinaryObjectServiceServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinaryObjectService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinaryObjectServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shdb.v1.BinaryObjectService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinaryObjectServiceServer).Create(ctx, req.(*CreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinaryObjectService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinaryObjectServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shdb.v1.BinaryObjectService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinaryObjectServiceServer).Update(ctx, req.(*UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinaryObjectService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinaryObjectServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shdb.v1.BinaryObjectService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinaryObjectServiceServer).Delete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinaryObjectService_StreamRefs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRefReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BinaryObjectServiceServer).StreamRefs(m, &binaryObjectServiceStreamRefsServer{stream})
}

type BinaryObjectService_StreamRefsServer interface {
	Send(*ObjRef) error
	grpc.ServerStream
}

type binaryObjectServiceStreamRefsServer struct {
	grpc.ServerStream
}

func (x *binaryObjectServiceStreamRefsServer) Send(m *ObjRef) error {
	return x.ServerStream.SendMsg(m)
}

func _BinaryObjectService_GetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinaryObjectServiceServer).GetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shdb.v1.BinaryObjectService/GetSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinaryObjectServiceServer).GetSchema(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinaryObjectService_GetTypeNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinaryObjectServiceServer).GetTypeNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shdb.v1.BinaryObjectService/GetTypeNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinaryObjectServiceServer).GetTypeNames(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BinaryObjectService_ServiceDesc is the grpc.ServiceDesc for BinaryObjectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BinaryObjectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shdb.v1.BinaryObjectService",
	HandlerType: (*BinaryObjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _BinaryObjectService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _BinaryObjectService_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _BinaryObjectService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _BinaryObjectService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BinaryObjectService_Delete_Handler,
		},
		{
			MethodName: "GetSchema",
			Handler:    _BinaryObjectService_GetSchema_Handler,
		},
		{
			MethodName: "GetTypeNames",
			Handler:    _BinaryObjectService_GetTypeNames_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamRefs",
			Handler:       _BinaryObjectService_StreamRefs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pb/shdb/v1/shdb.proto",
}
